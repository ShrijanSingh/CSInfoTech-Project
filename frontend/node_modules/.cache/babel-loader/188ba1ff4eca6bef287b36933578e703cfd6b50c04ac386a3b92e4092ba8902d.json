{"ast":null,"code":"var _jsxFileName = \"D:\\\\CSTech Info Solution Project\\\\frontend\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(/*#__PURE__*/_jsxDEV(BrowserRouter, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 10,\n  columnNumber: 3\n}, this));\n\n// Clear distributed list items when frontend is closed or refreshed\nwindow.addEventListener('beforeunload', async event => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    // Use navigator.sendBeacon for reliability\n    const url = 'http://localhost:5000/api/lists/clear';\n    const headers = {\n      'Authorization': `Bearer ${token}`\n    };\n    try {\n      navigator.sendBeacon(url, JSON.stringify({}));\n    } catch (err) {\n      // fallback: fetch\n      fetch(url, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({})\n      });\n    }\n  }\n});","map":{"version":3,"names":["React","ReactDOM","App","BrowserRouter","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","render","children","fileName","_jsxFileName","lineNumber","columnNumber","window","addEventListener","event","token","localStorage","getItem","url","headers","navigator","sendBeacon","JSON","stringify","err","fetch","method","body"],"sources":["D:/CSTech Info Solution Project/frontend/src/index.js"],"sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport App from './App';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport './App.css';\r\n\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>\r\n);\r\n\r\n// Clear distributed list items when frontend is closed or refreshed\r\nwindow.addEventListener('beforeunload', async (event) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    // Use navigator.sendBeacon for reliability\r\n    const url = 'http://localhost:5000/api/lists/clear';\r\n    const headers = { 'Authorization': `Bearer ${token}` };\r\n    try {\r\n      navigator.sendBeacon(url, JSON.stringify({}));\r\n    } catch (err) {\r\n      // fallback: fetch\r\n      fetch(url, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({})\r\n      });\r\n    }\r\n  }\r\n});\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,GAAG,MAAM,OAAO;AACvB,SAASC,aAAa,QAAQ,kBAAkB;AAChD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGnB,MAAMC,IAAI,GAAGL,QAAQ,CAACM,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,cACTL,OAAA,CAACF,aAAa;EAAAQ,QAAA,eACZN,OAAA,CAACH,GAAG;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACM,CACjB,CAAC;;AAED;AACAC,MAAM,CAACC,gBAAgB,CAAC,cAAc,EAAE,MAAOC,KAAK,IAAK;EACvD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACT;IACA,MAAMG,GAAG,GAAG,uCAAuC;IACnD,MAAMC,OAAO,GAAG;MAAE,eAAe,EAAE,UAAUJ,KAAK;IAAG,CAAC;IACtD,IAAI;MACFK,SAAS,CAACC,UAAU,CAACH,GAAG,EAAEI,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/C,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ;MACAC,KAAK,CAACP,GAAG,EAAE;QACTQ,MAAM,EAAE,QAAQ;QAChBP,OAAO,EAAE;UACP,eAAe,EAAE,UAAUJ,KAAK,EAAE;UAClC,cAAc,EAAE;QAClB,CAAC;QACDY,IAAI,EAAEL,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;MACzB,CAAC,CAAC;IACJ;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}